/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

'use strict';let getGraph = (() => {var _ref4 = _asyncToGenerator(




































































































  function* (optionsHash) {
    const status = "Getting last bundle's graph";

    terminal.status(`${status}... fetching from Metro`);
    const graph = metroServer.getGraphs().get(optionsHash);

    if (graph == null) {
      terminal.status(`${status}, failed.`);
      terminal.persistStatus();

      throw new Error('A graph with the given hash was not found');
    }

    terminal.status(`${status}, done.`);

    return graph.then(function (graphInfo) {return graphInfo.graph;});
  });return function getGraph(_x9) {return _ref4.apply(this, arguments);};})();function _asyncToGenerator(fn) {return function () {var gen = fn.apply(this, arguments);return new Promise(function (resolve, reject) {function step(key, arg) {try {var info = gen[key](arg);var value = info.value;} catch (error) {reject(error);return;}if (info.done) {resolve(value);} else {return Promise.resolve(value).then(function (value) {step("next", value);}, function (err) {step("throw", err);});}}return step("next");});};}const Router = require('router');const fs = require('fs');const metro = require('metro');var _require = require('./graph-api/routes');const initializeGraphRoutes = _require.initializeGraphRoutes;var _require2 = require('metro-core');const Terminal = _require2.Terminal;var _require3 = require('url');const parse = _require3.parse;const router = Router();const terminal = new Terminal(process.stdout);let metroServer;let metroHistory;function initializeMiddlewareRoutes(server, history) {metroServer = server;metroHistory = history;return router;}router.get('/', (req, res) => {const status = 'Launching visualizer';terminal.status(status);res.writeHead(200, { 'Content-Type': 'text/html' });res.write(fs.readFileSync(require.resolve('metro-visualizer/src/app/index.html')));res.end();terminal.status(`${status}, done.`);terminal.persistStatus();});router.use(function query(req, res, next) {req.query = req.url.includes('?') ? parse(req.url, true).query : {};next();});router.use('/', (err, req, res, next) => {console.error(err.stack);res.status(500).send(err.message);next();});router.use('/graph', (() => {var _ref = _asyncToGenerator(function* (req, res, next) {yield getGraph(req.query.hash).then(function (metroGraph) {return initializeGraphRoutes(metroGraph)(req, res, next);}).catch(function (error) {res.writeHead(500, { 'Content-Type': 'text/plain' });res.write(error && error.stack || error);res.end();});});return function (_x, _x2, _x3) {return _ref.apply(this, arguments);};})());router.get('/bundles', (() => {var _ref2 = _asyncToGenerator(function* (req, res) {res.setHeader('Content-Type', 'application/json; charset=utf-8');res.write(JSON.stringify(metroHistory));res.end();});return function (_x4, _x5) {return _ref2.apply(this, arguments);};})());router.use('/bundle.js', (() => {var _ref3 = _asyncToGenerator(function* (req, res, next) {const status = 'Bundling visualizer app';const options = { dev: true, entry: './src/app/index.js', minify: false, platform: 'web' };const config = yield metro.loadConfig({ config: require.resolve('./build-utils/metro.config.js') });yield metro.runBuild(config, options).then(function (val) {terminal.status(`${status}... serving`);res.writeHead(200, { 'Content-Type': 'text/javascript' });res.write(val.code);res.end();terminal.status(`${status}, done.`);terminal.persistStatus();}).catch(function (error) {terminal.log(error);terminal.status(`${status}, failed.`);terminal.persistStatus();});});return function (_x6, _x7, _x8) {return _ref3.apply(this, arguments);};})());

module.exports = { initializeMiddlewareRoutes };