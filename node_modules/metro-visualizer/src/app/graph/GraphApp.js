/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

/* eslint-env browser */

'use strict';

const Cytoscape = require('cytoscape');
const DependencyGraph = require('./components/DependencyGraph');
const InfoDrawer = require('./components/InfoDrawer');
const OptionsDrawer = require('./components/OptionsDrawer');
const React = require('react');
const SearchBar = require('./components/SearchBar');

const handleAPIError = require('../utils/handleAPIError');var _require =

require('emotion');const css = _require.css;

import { message, Row, Col, Button, Icon } from 'antd';





























Cytoscape.use(require('cytoscape-euler'));

class GraphApp extends React.Component {constructor() {var _temp;return _temp = super(...arguments), this.
    state = {
      showLoadingIndicator: true,
      showPathSearch: false,
      graphOptions: { layoutName: 'dagre' },
      graphFilters: {} }, this.

















    handleModuleSelection = modulePath => {
      this.firstModule = modulePath;
      if (!this.state.showPathSearch) {
        this.setState({ showLoadingIndicator: true });
        fetch(
        `/visualizer/graph/modules/${modulePath}?hash=${
        this.props.match.params[0]
        }`).

        then(res => {
          this.setState({ showLoadingIndicator: false });
          return handleAPIError(res);
        }).
        then(response => response.json()).
        then(graph => this.setState({ graph })).
        catch(error => message.error(error.message));
      }
    }, this.

    handleSecondModuleSelection = modulePath => {
      this.setState({ showLoadingIndicator: true });
      fetch(
      `/visualizer/graph/modules/${this.firstModule}?to=${modulePath}&hash=${
      this.props.match.params[0]
      }`).

      then(res => {
        this.setState({ showLoadingIndicator: false });
        return handleAPIError(res);
      }).
      then(response => response.json()).
      then(graph => this.setState({ graph })).
      catch(error => message.error(error.message));
    }, this.

    handleOptionChange = options => {
      this.setState({ graphOptions: options });
    }, this.

    handleFilterChange = filters => {
      this.setState({
        graphFilters: Object.assign({}, this.state.graphFilters, filters) });

    }, this.

    togglePathSearch = () => {
      this.setState({ showPathSearch: !this.state.showPathSearch });
    }, _temp;}componentDidMount() {fetch(`/visualizer/graph/info?hash=${this.props.match.params[0]}`).then(res => {this.setState({ showLoadingIndicator: false });return handleAPIError(res);}).then(response => response.json()).then(res => {this.setState(res);}).catch(error => message.error(error.message));}

  render() {
    return (
      React.createElement('div', { id: 'container' },
        this.state.graph &&
        React.createElement(DependencyGraph, {
          hash: this.props.match.params[0],
          graph: this.state.graph,
          options: this.state.graphOptions,
          filters: this.state.graphFilters,
          handleSelectionChange: selectedNodeData =>
          this.setState({ selectedNodeData }) }),



        this.state.modules &&
        this.state.info &&
        React.createElement('div', null,
          React.createElement(Row, {
              type: 'flex',
              justify: 'center',
              align: 'middle',
              className: searchRow },
            React.createElement(Col, {
                span: this.state.showPathSearch ? 14 : 12,
                className: searchCol },
              React.createElement(SearchBar, {
                data: this.state.modules,
                onSelection: this.handleModuleSelection }),

              this.state.showPathSearch &&
              React.createElement(Icon, {
                type: 'arrow-right',
                style: { fontSize: 20, marginTop: 10 } }),


              this.state.showPathSearch &&
              React.createElement(SearchBar, {
                data: this.state.modules,
                onSelection: this.handleSecondModuleSelection }),


              React.createElement(Button, {
                className: headerButton,
                type: 'default',
                size: 'large',
                onClick: this.togglePathSearch,
                icon: this.state.showPathSearch ? 'close' : 'share-alt' }))),



          React.createElement(InfoDrawer, { data: this.state.selectedNodeData }),
          React.createElement(OptionsDrawer, {
            options: this.state.graphOptions,
            onOptionChange: this.handleOptionChange,
            onFilterChange: this.handleFilterChange,
            info: this.state.info })),




        this.state.showLoadingIndicator &&
        React.createElement(Icon, { type: 'loading', className: loadingIndicator })));



  }}


const searchRow = css`
  margin-top: 20px;
`;

const loadingIndicator = css`
  font-size: 4em;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateY(-50%) translateX(-50%);
`;

const headerButton = css`
  height: 40px;
  width: 40px;
`;

const searchCol = css`
  display: flex;
`;

module.exports = GraphApp;