/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

/* eslint-env browser */

'use strict';

const React = require('react');

const filesize = require('filesize');var _require =

require('emotion');const css = _require.css;

import { Drawer, Button, List } from 'antd';










class InfoDrawer extends React.Component {constructor() {var _temp;return _temp = super(...arguments), this.
    state = { visible: false }, this.

    showDrawer = () => {
      this.setState({
        visible: true });

    }, this.

    onClose = () => {
      this.setState({
        visible: false });

    }, _temp;}

  render() {
    return (
      React.createElement('div', null,
        React.createElement(Button, {
          className: infoDrawerButton,
          type: 'default',
          size: 'large',
          onClick: this.showDrawer,
          icon: 'info' }),

        React.createElement(Drawer, {
            title: this.props.data ? this.props.data.label : 'Module Info',
            placement: 'left',
            mask: false,
            onClose: this.onClose,
            visible: this.state.visible },
          this.props.data ?
          React.createElement(NodeDataView, { data: this.props.data }) :

          'Select a node to display information about it...')));




  }}


const NodeDataView = props =>
React.createElement(List, { itemLayout: 'vertical' },
  React.createElement(List.Item, null,
    React.createElement(List.Item.Meta, { title: 'Path' }),
    React.createElement('div', { className: pathWrapper }, props.data.id)),

  React.createElement(List.Item, null,
    React.createElement(List.Item.Meta, { title: 'Dependencies' }),
    React.createElement(DepList, { deps: props.data.deps })),

  React.createElement(List.Item, null,
    React.createElement(List.Item.Meta, { title: 'Inverse Dependencies' }),
    React.createElement(DepList, { deps: props.data.inverseDeps })),

  props.data.size != null &&
  React.createElement(List.Item, null,
    React.createElement(List.Item.Meta, { title: 'Size' }),
    filesize(props.data.size)));





const DepList = props =>
React.createElement(List, { itemLayout: 'vertical', className: depList },
  props.deps.map(dep =>
  React.createElement(List.Item, { key: dep },
    React.createElement('p', { className: depTitle }, dep.substring(dep.lastIndexOf('/') + 1)),
    React.createElement('div', { className: pathWrapper }, dep))));





const infoDrawerButton = css`
  position: absolute;
  top: 20px;
  left: 20px;
  font-size: 1.5em;
`;

const depList = css`
  max-height: 300px;
  overflow: auto;
  margin-left: 10px;
`;

const depTitle = css`
  font-weight: bold;
`;

const pathWrapper = css`
  height: 3em;
  margin-bottom: -3em;
  overflow-y: hidden;
  overflow-x: auto;
  white-space: nowrap;
`;

module.exports = InfoDrawer;