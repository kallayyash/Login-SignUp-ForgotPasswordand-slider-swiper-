/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

/* eslint-env browser */

'use strict';var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

const BundlePlots = require('./components/BundlePlots');
const BundleRunForm = require('./components/BundleRunForm');
const React = require('react');

const handleAPIError = require('../utils/handleAPIError');var _require =

require('emotion');const injectGlobal = _require.injectGlobal,css = _require.css;var _require2 =
require('react-router-dom');const Link = _require2.Link;





import { message, Row, Col, Card, Tag, Icon } from 'antd';








class DashboardApp extends React.Component {
  componentDidMount() {
    this.fetchBundles();
  }

  fetchBundles() {
    this.setState({ showLoadingIndicator: true });
    fetch('/visualizer/bundles').
    then(res => {
      this.setState({ showLoadingIndicator: false });
      return handleAPIError(res);
    }).
    then(response => response.json()).
    then(metroHistory => {
      this.setState({ metroHistory });
    }).
    catch(error => message.error(error.message));
  }

  render() {
    return (
      this.state &&
      React.createElement('div', null,
        React.createElement(Row, { type: 'flex', justify: 'center' },
          React.createElement('img', {
            src: 'https://facebook.github.io/metro/img/metro.svg',
            className: logo,
            alt: 'logo' })),



        React.createElement(Row, { type: 'flex', justify: 'center' },
          React.createElement(Col, { span: 16 },
            React.createElement(BundleRunForm, {
              handleStartedBundling: () =>
              this.setState({ showLoadingIndicator: true }),

              handleFinishedBundling: () => this.fetchBundles() }))),




        React.createElement(Row, { type: 'flex', justify: 'center' },
          React.createElement(Col, { span: 16 },
            this.state.metroHistory &&
            Object.keys(this.state.metroHistory).map(bundleHash =>
            React.createElement(Link, { to: `/graph/${bundleHash}`, key: bundleHash },
              React.createElement(BundleCard, {
                onClick: () =>
                this.setState({ selectedBundleHash: bundleHash }),

                bundleInfo: this.state.metroHistory[bundleHash] }))))),






        this.state.showLoadingIndicator &&
        React.createElement(Icon, { type: 'loading', className: loadingIndicator })));




  }}


const BundleCard = props =>





{
  const entryFile = props.bundleInfo.options.entryFile;
  return (
    React.createElement(Card, { onClick: props.onClick, className: bundleCard, hoverable: true },
      React.createElement('p', { className: bundleCardTitle },
        entryFile.substring(entryFile.lastIndexOf('/') + 1),
        Object.keys(props.bundleInfo.builds).
        map(id => props.bundleInfo.builds[id]).
        filter(info => info.isInitial).
        map(
        info =>
        info.duration != null ?
        React.createElement('span', { className: initalInfo, key: 'initial' },
          info.duration, ' ms | ', info.numModifiedFiles, ' files') :

        null)),



      React.createElement(BundlePlots, {
        builds: Object.keys(props.bundleInfo.builds).
        map(id => props.bundleInfo.builds[id]).
        filter(info => !info.isInitial && info.status === 'done') }),


      React.createElement(Row, { type: 'flex', className: tagsRow },
        Object.entries(props.bundleInfo.options).map((_ref) => {var _ref2 = _slicedToArray(_ref, 2);let name = _ref2[0],option = _ref2[1];
          if (typeof option === 'boolean' && option === true) {
            return React.createElement(Tag, { key: name }, name);
          }
          if (typeof option === 'string' && name === 'platform') {
            return React.createElement(Tag, { key: name }, option);
          }
          return null;
        }))));



};

injectGlobal`
  body {
    background-color: #f9f9f9;
  }
`;

const tagsRow = css`
  margin-top: 8px;
  margin-bottom: -8px;
`;

const bundleCard = css`
  width: 100%;
  margin: 8px 0px;
  word-wrap: break-word;
`;

const bundleCardTitle = css`
  font-size: 11pt;
  font-weight: 500;
`;

const logo = css`
  margin: 20px;
  height: 80px;
  width: 80px;
`;

const initalInfo = css`
  margin-left: 8px;
  font-size: 9pt;
  color: #aaa;
`;

const loadingIndicator = css`
  font-size: 4em;
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translateY(-50%) translateX(-50%);
`;

module.exports = DashboardApp;