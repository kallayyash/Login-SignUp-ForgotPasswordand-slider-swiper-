/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

/* eslint-env browser */

'use strict';function _toConsumableArray(arr) {if (Array.isArray(arr)) {for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];return arr2;} else {return Array.from(arr);}}

const React = require('react');

const filesize = require('filesize');var _require =

require('emotion');const css = _require.css;


import {
XYPlot,
LineMarkSeries,
Crosshair,
VerticalBarSeries,
AreaSeries } from
'react-vis';







class BundlePlots extends React.Component {constructor() {var _temp;return _temp = super(...arguments), this.
    state = {
      crosshairValues: [] }, this.


    handleNearestX = (value, data) => {
      const build = this.props.builds[data.index];
      this.setState({
        crosshairValues: [
        { x: data.index, y: build.duration },
        { x: data.index, y: build.bundleSize },
        { x: data.index, y: build.numModifiedFiles }] });


    }, _temp;}

  render() {
    const timeData = this.props.builds.map((build, index) => ({
      x: index,
      y: build.duration }));


    const buildSizes = this.props.builds.map(
    build => build.bundleSize != null ? build.bundleSize : 0);

    const minSize = Math.min.apply(Math, _toConsumableArray(buildSizes));
    const sizeData = buildSizes.map((size, index) => ({
      x: index,
      y: size - minSize * 0.999 }));


    const filesData = this.props.builds.map((build, index) => ({
      x: index,
      y: build.numModifiedFiles != null ? build.numModifiedFiles : 0 }));


    return (
      React.createElement('div', { className: plotContainer },
        React.createElement(XYPlot, {
            width: 200,
            height: 100,
            onMouseLeave: () => this.setState({ crosshairValues: [] }) },
          React.createElement(LineMarkSeries, {
            color: '#ef4242',
            curve: 'curveMonotoneX',
            onNearestX: this.handleNearestX,
            data: timeData }),

          React.createElement(Crosshair, { values: this.state.crosshairValues },
            this.state.crosshairValues.length > 0 &&
            React.createElement('div', { className: crosshair, key: this.state.crosshairValues[0].x },
              React.createElement('p', null, this.state.crosshairValues[0].y, ' ms')))),





        React.createElement(XYPlot, {
            width: 200,
            height: 100,
            onMouseLeave: () => this.setState({ crosshairValues: [] }) },
          React.createElement(VerticalBarSeries, {
            color: '#ef4242',
            curve: 'curveMonotoneX',
            onNearestX: this.handleNearestX,
            data: sizeData }),

          React.createElement(Crosshair, { values: this.state.crosshairValues },
            this.state.crosshairValues.length > 0 &&
            React.createElement('div', { className: crosshair, key: this.state.crosshairValues[1].x },
              React.createElement('p', null, filesize(this.state.crosshairValues[1].y))))),





        React.createElement(XYPlot, {
            width: 200,
            height: 100,
            onMouseLeave: () => this.setState({ crosshairValues: [] }) },
          React.createElement(AreaSeries, {
            color: '#ef4242',
            curve: 'curveMonotoneX',
            onNearestX: this.handleNearestX,
            data: filesData }),

          React.createElement(Crosshair, { values: this.state.crosshairValues },
            this.state.crosshairValues.length > 0 &&
            React.createElement('div', { className: crosshair, key: this.state.crosshairValues[2].x },
              React.createElement('p', null, this.state.crosshairValues[2].y, ' files'))))));






  }}


const plotContainer = css`
  width: 100%;
  height: 100;
  display: flex;
  justify-content: space-around;
`;

const crosshair = css`
  background: none;
  margin-top: 60px;
`;

module.exports = BundlePlots;