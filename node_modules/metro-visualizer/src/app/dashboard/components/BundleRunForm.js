/**
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 * 
 * @format
 */

/* eslint-env browser */

'use strict';var _slicedToArray = function () {function sliceIterator(arr, i) {var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i["return"]) _i["return"]();} finally {if (_d) throw _e;}}return _arr;}return function (arr, i) {if (Array.isArray(arr)) {return arr;} else if (Symbol.iterator in Object(arr)) {return sliceIterator(arr, i);} else {throw new TypeError("Invalid attempt to destructure non-iterable instance");}};}();

const React = require('react');

const handleAPIError = require('../../utils/handleAPIError');

import { message, Input, Select, Form, Button } from 'antd';











class BundleRunForm extends React.Component {constructor() {var _temp;return _temp = super(...arguments), this.
    state = { entryPath: '', options: [] }, this.

    default_options = {
      platform: 'ios',
      dev: false,
      minify: false,
      entryModuleOnly: false,
      excludeSource: false,
      inlineSourceMap: false,
      runModule: false }, this.


    handleOptionSelect = val => {
      this.setState({ options: this.state.options.concat([val]) });
    }, this.

    handleOptionDeselect = val => {
      this.setState({ options: this.state.options.filter(op => op !== val) });
    }, this.

    handleSubmit = e => {
      this.props.handleStartedBundling();
      e.preventDefault();

      var url = `${this.state.entryPath}?`;

      const params = {};

      for (const _ref of Object.entries(this.default_options)) {var _ref2 = _slicedToArray(_ref, 2);const option = _ref2[0];const value = _ref2[1];
        if (value != null) {
          params[option] = String(value);
        }
      }

      for (const option of this.state.options) {
        params[option] = 'true';
      }

      for (const key of Object.keys(params)) {
        url = url.concat(`${key}=${params[key]}&`);
      }

      fetch(url.slice(0, -1)).
      then(handleAPIError).
      then(res => this.props.handleFinishedBundling()).
      catch(error => message.error(error.message));
    }, _temp;}

  render() {
    return (
      React.createElement(Form, { onSubmit: this.handleSubmit, style: { display: 'flex' } },
        React.createElement(Form.Item, { style: { width: '90%' } },
          React.createElement(Input, {
            name: 'entry-file',
            onChange: e => this.setState({ entryPath: e.target.value }),
            placeholder: 'Entry file...',
            value: this.state.entryPath,
            addonAfter:
            React.createElement(Select, {
                onSelect: this.handleOptionSelect,
                onDeselect: this.handleOptionDeselect,
                style: { width: 300 },
                mode: 'multiple',
                placeholder: 'Options...',
                value: this.state.options },
              Object.entries(this.default_options).map(
              (_ref3) => {var _ref4 = _slicedToArray(_ref3, 2);let option = _ref4[0],value = _ref4[1];return (
                  typeof value === 'boolean' ?
                  React.createElement(Select.Option, { value: option, key: option },
                    option) :

                  null);})) })),





        React.createElement(Form.Item, {
            style: { width: '10%', display: 'flex', justifyContent: 'flex-end' } },
          React.createElement(Button, {
              type: 'default',
              htmlType: 'submit',
              className: 'login-form-button' }, 'Build'))));





  }}


module.exports = BundleRunForm;